# Canton Wallet Demo - Cursor Rules

## Project Context

This is a Canton Network wallet demo application built with React, Vite, and the Canton Wallet SDK. The project demonstrates creating external wallets and minting tokens on the Canton Network.

### Important SDK Issue

**The Canton Wallet SDK v0.5.0 has a bug that prevents real LocalNet integration.** See `SDK_BUG_NOTES.md` for details. Integration tests currently use a mock service instead of connecting to real LocalNet.

## Code Style and Conventions

### JavaScript/React

- Use ES6+ features and modern React patterns (hooks, functional components)
- Prefer const over let, avoid var
- Use async/await over promises where possible
- Handle errors explicitly with try/catch blocks
- Use descriptive variable names (e.g., `walletInfo` not `wi`)

### Testing

- Write tests for all critical functionality
- Use descriptive test names that explain the scenario
- Mock external dependencies in unit tests
- Integration tests use mock service until SDK bug is fixed
- Aim for high code coverage but prioritize meaningful tests

### Canton SDK Integration

- Always initialize SDK before using other methods
- Handle authentication properly (unsafe auth for LocalNet)
- Use the prepare-sign-submit pattern for transactions
- Store party IDs after wallet creation
- Check for wallet existence before token operations

## Project Structure

```
canton-wallet-demo/
├── src/
│   ├── App.jsx              # Main React component
│   ├── cantonService.js     # Canton SDK service layer
│   ├── config.js            # Configuration for LocalNet
│   └── test/
│       ├── *.test.js        # Unit tests
│       ├── integration.test.js # Integration tests
│       └── mockCantonService.js # Mock service for testing
├── SDK_BUG_NOTES.md         # Documentation of SDK bug
└── README.md                # Project documentation
```

## LocalNet Configuration

LocalNet runs on these ports:
- Ledger API: 2901
- Admin API: 2902
- Validator API: 2903
- JSON API: 2975
- Scan API: 2000

## Testing Strategy

### Unit Tests
- Test individual components and services
- Mock all Canton SDK dependencies
- Focus on business logic and error handling

### Integration Tests
- Currently use mock service due to SDK bug
- Test complete user workflows
- Will switch to real LocalNet once SDK is fixed

### Running Tests
```bash
npm test              # Run all tests
npm run test:unit    # Unit tests only
npm run test:integration # Integration tests (with mock)
```

## Common Patterns

### Creating an External Wallet
```javascript
const keyPair = createKeyPair();
const preparedParty = await sdk.topology.prepareExternalPartyTopology(
  keyPair.publicKey,  // SDK expects base64 string
  partyHint
);
// Sign and submit...
```

### Error Handling
```javascript
try {
  const result = await cantonService.createToken(...);
  // Handle success
} catch (error) {
  console.error('Operation failed:', error);
  // Show user-friendly error message
}
```

## Development Workflow

1. Make changes to code
2. Run unit tests to verify functionality
3. Run integration tests (currently with mock)
4. Test manually with UI if needed
5. Ensure all tests pass before committing

## Known Issues and Workarounds

1. **SDK Bug**: `prepareExternalPartyTopology` fails with LocalNet
   - Workaround: Use mock service for testing
   - See SDK_BUG_NOTES.md for details

2. **Buffer in Browser**: Need polyfill for browser environment
   - Already configured in index.html

3. **Authentication**: LocalNet uses unsafe auth
   - Token: 'unsafe'
   - User: 'ledger-api-user'

## Future Improvements

Once SDK bug is fixed:
1. Remove mock service workaround
2. Update integration tests to use real LocalNet
3. Add more comprehensive end-to-end tests
4. Consider adding performance tests

## Code Review Checklist

- [ ] All tests pass
- [ ] Error handling is comprehensive
- [ ] No hardcoded values (use config)
- [ ] Code follows project conventions
- [ ] Documentation is updated if needed
- [ ] No console.log statements in production code
- [ ] Async operations have proper error handling