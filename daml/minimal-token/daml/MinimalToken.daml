module MinimalToken where

template Instrument
  with
    admin    : Party
    name     : Text
    symbol   : Text
    decimals : Int
  where
    signatory admin

    -- Admin mints a Holding directly to an owner (nonconsuming to allow multiple mints)
    nonconsuming choice Issue : ContractId HoldingProposal
      with
        owner  : Party
        amount : Decimal
      controller admin
      do
        assertMsg "amount must be positive" (amount > 0.0)
        create HoldingProposal with admin, owner, instrument = self, amount

    -- Auto-accept: admin directly creates Holding (both admin and owner sign)
    nonconsuming choice IssueAndAccept : ContractId Holding
      with
        owner  : Party
        amount : Decimal
      controller admin, owner
      do
        assertMsg "amount must be positive" (amount > 0.0)
        create Holding with admin, owner, instrument = self, amount

template HoldingProposal
  with
    admin      : Party
    owner      : Party
    instrument : ContractId Instrument
    amount     : Decimal
  where
    signatory admin
    observer owner

    choice Accept : ContractId Holding
      controller owner
      do
        create Holding with admin, owner, instrument, amount

template Holding
  with
    admin      : Party
    owner      : Party
    instrument : ContractId Instrument
    amount     : Decimal
  where
    signatory admin, owner  -- Both parties sign (required for cross-participant holdings)

    -- Transfer part or all of the holding; consumes self and
    -- returns new recipient holding and optional change for sender
    choice Transfer : (ContractId Holding, Optional (ContractId Holding))
      with
        recipient      : Party
        transferAmount : Decimal
      controller owner
      do
        assertMsg "transferAmount must be positive" (transferAmount > 0.0)
        assertMsg "insufficient balance" (transferAmount <= amount)
        archive self
        newCid <- create Holding with
          admin
          owner = recipient
          instrument
          amount = transferAmount
        if transferAmount < amount then do
          changeCid <- create Holding with
            admin
            owner = owner
            instrument
            amount = amount - transferAmount
          return (newCid, Some changeCid)
        else
          return (newCid, None)

    -- Legacy: Direct burn (may not work cross-participant with dual signatories)
    choice Burn : ()
      controller owner
      do
        archive self
        return ()

    -- ProposeBurn: Burns holding immediately (consuming choice by design)
    -- DESIGN NOTE: This choice is consuming (not marked nonconsuming), which means
    -- it archives the Holding when exercised. The created BurnProposal serves as
    -- an audit trail but the burn happens immediately. This is intentional for
    -- cross-participant Holdings with dual signatories (admin + owner).
    choice ProposeBurn : ContractId BurnProposal
      controller owner
      do
        create BurnProposal with
          admin
          owner
          holding = self

-- BurnProposal: Audit trail for burned Holdings
-- DESIGN NOTE: This template exists as an audit record. The referenced Holding
-- is already archived when ProposeBurn is exercised (consuming choice). The
-- AcceptBurn choice is provided for completeness but the burn has already occurred.
template BurnProposal
  with
    admin   : Party
    owner   : Party
    holding : ContractId Holding  -- Contract ID reference (Holding is already archived)
  where
    signatory owner
    observer admin

    -- Admin accepts burn proposal â†’ archives the Holding
    -- NOTE: In practice, the Holding is already archived by ProposeBurn
    choice AcceptBurn : ()
      controller admin
      do
        exercise holding Archive
        return ()

    -- Owner rejects/cancels burn proposal
    choice RejectBurn : ()
      controller owner
      do
        return ()